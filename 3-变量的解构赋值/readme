关键词：

ES6内部相等使用的是严格相等运算符（===），因此，默认值生效的条件是，对象的属性值严格等于undefined。
解构失败，变量的值等于undefined
惰性求值
对象的解构赋值的内部机制，是先找到同名属性，然后再赋给对应的变量
({ foo} = { foo: 123});这种必须要与key同名才能实现解构赋值,但是这样可以不与key同名({ foo:myName} = { foo: 123});
如果解构模式是嵌套的对象，而且子对象所在的父属性不存在，那么将会报错:var {foo: {bar}} = {baz: 'baz'};
解构赋值的规则是，只要等号右边的值不是对象，就先将其转为对象。由于undefined和null无法转为对象，所以会报错
    let { prop: x } = undefined; // TypeError
    let { prop: y } = null; // TypeError
以下三种解构赋值不得使用圆括号:(不是非常理解)
    1.变量声明语句中，不能带有圆括号
    2.函数参数中，模式不能带有圆括号
    3.赋值语句中，不能将整个模式，或嵌套模式中的一层，放在圆括号之中。
赋值语句的非模式部分，可以使用圆括号


解构复制的用途：
    1.交换变量的值
    2.从函数返回多个值
    3.函数参数的定义
    4.提取JSON数据
    5.函数参数的默认值
    6.遍历Map结构
    7.输入模块的指定方法